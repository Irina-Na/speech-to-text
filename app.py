import tempfile
from pathlib import Path
import shutil
import zipfile
import streamlit as st
import whisper

from transcribe_video_to_russian import transcribe

st.set_page_config(page_title="Whisper‚ÄëRU Transcriber", page_icon="üìù", layout="centered")
st.title("üìù Whisper‚ÄëRU Transcriber")

st.markdown(
    """
**Single file** ‚ñ∂ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –º–µ–¥–∏–∞‚Äë—Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç.  
**Batch mode** ‚ñ∂ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤; –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
zip‚Äë–∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏.
"""
)

mode = st.radio(
    "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
    ["Single file", "Batch mode"],
    horizontal=True,
    key="mode_radio",
)

model_size = st.selectbox("–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏", ["tiny", "base", "small", "medium", "large"], index=2)

# build language options from Whisper
whisper_langs = whisper.tokenizer.LANGUAGES
top_langs = [
    ("–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "en"),
    ("—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π", "uk"),
    ("—Ä—É—Å—Å–∫–∏–π", "ru"),
    ("language autodetection", "auto"),
]
other_langs = sorted(
    [(name, code) for code, name in whisper_langs.items() if code not in {"en", "uk", "ru"}],
    key=lambda x: x[0],
)
all_langs = top_langs + other_langs

lang_choice = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
    options=all_langs,
    format_func=lambda x: x[0].capitalize() if x[1] == "auto" else f"{x[0].capitalize()} ({x[1]})",
    index=2,
    key="language_select",
)
language = None if lang_choice[1] == "auto" else lang_choice[1]

if mode == "Single file":
    up_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["mp4", "mp3", "wav", "m4a"], accept_multiple_files=False)
    if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å"):
        if not up_file:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        else:
            with tempfile.NamedTemporaryFile(delete=False, suffix=Path(up_file.name).suffix) as tmp:
                tmp.write(up_file.getbuffer())
                tmp_path = Path(tmp.name)

            output_dir = Path("outputs")
            output_dir.mkdir(exist_ok=True)
            out_path = output_dir / f"{Path(up_file.name).stem}_{model_size}.txt"

            with st.spinner("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º‚Ä¶"):
                transcribe(str(tmp_path), str(out_path), model_size=model_size, language=language)

            st.success("–ì–æ—Ç–æ–≤–æ!")
            st.download_button("–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç", data=out_path.read_text("utf‚Äë8"), file_name=out_path.name, mime="text/plain")

else:  # Batch mode
    up_files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤", type=["mp4", "mp3", "wav", "m4a"], accept_multiple_files=True)
    zip_checkbox = st.checkbox("–°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –≤ zip‚Äë–∞—Ä—Ö–∏–≤")

    if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ"):
        if not up_files:
            st.warning("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        else:
            output_dir = Path("outputs")
            output_dir.mkdir(exist_ok=True)
            temp_dir = Path(tempfile.mkdtemp())
            transcript_paths = []

            progress = st.progress(0)
            for idx, file in enumerate(up_files, start=1):
                with tempfile.NamedTemporaryFile(dir=temp_dir, delete=False, suffix=Path(file.name).suffix) as tmp:
                    tmp.write(file.getbuffer())
                    tmp_path = Path(tmp.name)

                out_path = output_dir / f"{Path(file.name).stem}_{model_size}.txt"
                transcribe(str(tmp_path), str(out_path), model_size=model_size, language=language)
                transcript_paths.append(out_path)
                progress.progress(idx / len(up_files))

            st.success(f"–ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(up_files)} —Ñ–∞–π–ª–æ–≤.")

            if zip_checkbox:
                zip_name = output_dir / "transcripts.zip"
                with zipfile.ZipFile(zip_name, "w", zipfile.ZIP_DEFLATED) as zf:
                    for p in transcript_paths:
                        zf.write(p, arcname=p.name)
                st.download_button("–°–∫–∞—á–∞—Ç—å zip", data=zip_name.read_bytes(), file_name="transcripts.zip", mime="application/zip")
            else:
                for p in transcript_paths:
                    st.download_button(f"–°–∫–∞—á–∞—Ç—å {p.name}", data=p.read_text("utf‚Äë8"), file_name=p.name, mime="text/plain")

            # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            shutil.rmtree(temp_dir, ignore_errors=True)
